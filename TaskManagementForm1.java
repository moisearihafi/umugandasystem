/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Dao.TaskDao;
import Dao.VillageChieDao;
import Model.CellChief;
import Model.Task;
import Model.VillageChief;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Divin
 */
public class TaskManagementForm1 extends javax.swing.JFrame {
            private CellChief cellChief;
            private int id; 
            // Map to store village name -> village chief ID
            private Map<String, Integer> villageNameToIdMap = new HashMap<>();

    /** Creates new form TaskMnagementForm1 */
    public TaskManagementForm1(CellChief cellChief, int id) {
        this.cellChief=cellChief;
        this.id = id;
        initComponents();
        
        loadTasks();
        
        
    }
   
    
     private void loadTasks() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // ✅ Correctly get the table model
    model.setRowCount(0); // ✅ Clear the table using model

    try {
        TaskDao taskDao = new TaskDao();
        List<Task> tasks = taskDao.getAllTasks(cellChief.getId());

        VillageChieDao villageChiefDao = new VillageChieDao();

        for (Task task : tasks) {
            VillageChief villageChief = villageChiefDao.getVillageChiefById(task.getVillageChiefId());
            String villageChiefName = (villageChief != null) ? villageChief.getVillageName() : "Unknown";

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String taskDate = dateFormat.format(task.getTaskDate());

            Object[] row = {
                task.getId(),
                task.getTitle(),
                task.getDescription(),
                taskDate,
                villageChiefName
            };
            model.addRow(row); // ✅ Add rows using model
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading tasks: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
     private void clearFields() {
    titleField.setText("");
    descriptionArea.setText("");
    dateChooser.setDate(null); // If you're using a JDateChooser
   
}








    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        n = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        descriptionArea = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Add = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        dateChooser = new com.toedter.calendar.JDateChooser();
        villageChiefField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.setBackground(new java.awt.Color(0, 102, 51));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/log3-removebg-preview.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Umuganda management system");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Task:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description:");

        n.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        n.setForeground(new java.awt.Color(255, 255, 255));
        n.setText("Village Name:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Task Date:");

        Add.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Add.setText("ADD");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Update.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("DELETE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("BACK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Description", "Task Date", "Village Chief"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(descriptionArea, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLayout.createSequentialGroup()
                                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(n)
                                            .addComponent(jLabel6))
                                        .addGap(52, 52, 52)
                                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(villageChiefField))))
                                .addGap(154, 154, 154))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Add)
                        .addGap(111, 111, 111)
                        .addComponent(Update)
                        .addGap(144, 144, 144)
                        .addComponent(jButton3)))
                .addGap(0, 311, Short.MAX_VALUE))
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(descriptionArea, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(n)
                    .addComponent(villageChiefField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(84, 84, 84)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Update)
                    .addComponent(jButton3)
                    .addComponent(Add)
                    .addComponent(jButton4))
                .addGap(73, 73, 73)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
    
   String title = titleField.getText().trim();
String description = descriptionArea.getText().trim();
Date taskDate = dateChooser.getDate();
String villageChiefName = villageChiefField.getText().trim();

if (title.isEmpty() || description.isEmpty() || taskDate == null || villageChiefName.isEmpty()) {
    JOptionPane.showMessageDialog(this, "All fields are required", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

if (taskDate.before(new Date())) {
    JOptionPane.showMessageDialog(this, "Task date cannot be in the past", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// NEW CONDITION: Must be Saturday
java.util.Calendar calendar = java.util.Calendar.getInstance();
calendar.setTime(taskDate);
int dayOfWeek = calendar.get(java.util.Calendar.DAY_OF_WEEK);
if (dayOfWeek != java.util.Calendar.SATURDAY) {
    JOptionPane.showMessageDialog(this, "Task date must be on a Saturday", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// NEW CONDITION: Must be the last Saturday of the month
int lastDayOfMonth = calendar.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
calendar.set(java.util.Calendar.DAY_OF_MONTH, lastDayOfMonth);  // Set to the last day of the month
int lastDayOfWeek = calendar.get(java.util.Calendar.DAY_OF_WEEK);

// Calculate the last Saturday of the month
int daysToSubtract = (lastDayOfWeek == java.util.Calendar.SATURDAY) ? 0 : (lastDayOfWeek + 1) % 7;
calendar.add(java.util.Calendar.DAY_OF_MONTH, -daysToSubtract); // Move back to the last Saturday

// Check if the selected date is the last Saturday of the month
if (!calendar.getTime().equals(taskDate)) {
    JOptionPane.showMessageDialog(this, "Task date must be the last Saturday of the month", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

try {
    VillageChieDao villageChieDao = new VillageChieDao();
    VillageChief villageChief = villageChieDao.getVillageChiefByName(villageChiefName, cellChief.getId());
    
    if (villageChief == null) {
        JOptionPane.showMessageDialog(this, "Village name not found", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    TaskDao taskDao = new TaskDao();
    Task task = new Task(title, description, taskDate, villageChief.getId(), cellChief.getId());
    
    if (taskDao.registerTask(task)) {
        JOptionPane.showMessageDialog(this, "Task added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        clearFields();
        loadTasks();
    } else {
        JOptionPane.showMessageDialog(this, "Failed to add task", "Error", JOptionPane.ERROR_MESSAGE);
    }
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

  
        
        
    }//GEN-LAST:event_AddActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        new VillageChiefManagement(cellChief).setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
    int selectedRow = jTable1.getSelectedRow();
if (selectedRow < 0) {
    JOptionPane.showMessageDialog(this, "Please select a task to update", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

int taskId = (int) jTable1.getValueAt(selectedRow, 0);
String title = titleField.getText().trim();
String description = descriptionArea.getText().trim();
Date taskDate = dateChooser.getDate();
String villageChiefName = villageChiefField.getText().trim();

if (title.isEmpty() || description.isEmpty() || taskDate == null || villageChiefName.isEmpty()) {
    JOptionPane.showMessageDialog(this, "All fields are required", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

if (taskDate.before(new Date())) {
    JOptionPane.showMessageDialog(this, "Task date cannot be in the past", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// NEW CONDITION: Must be Saturday
java.util.Calendar calendar = java.util.Calendar.getInstance();
calendar.setTime(taskDate);
int dayOfWeek = calendar.get(java.util.Calendar.DAY_OF_WEEK);
if (dayOfWeek != java.util.Calendar.SATURDAY) {
    JOptionPane.showMessageDialog(this, "Task date must be on a Saturday", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// NEW CONDITION: Must be the last Saturday of the month
int lastDayOfMonth = calendar.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
calendar.set(java.util.Calendar.DAY_OF_MONTH, lastDayOfMonth);  // Set to the last day of the month
int lastDayOfWeek = calendar.get(java.util.Calendar.DAY_OF_WEEK);

// Calculate the last Saturday of the month
int daysToSubtract = (lastDayOfWeek == java.util.Calendar.SATURDAY) ? 0 : (lastDayOfWeek + 1) % 7;
calendar.add(java.util.Calendar.DAY_OF_MONTH, -daysToSubtract); // Move back to the last Saturday

// Check if the selected date is the last Saturday of the month
if (!calendar.getTime().equals(taskDate)) {
    JOptionPane.showMessageDialog(this, "Task date must be the last Saturday of the month", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

try {
    VillageChieDao villageChieDao = new VillageChieDao();
    VillageChief villageChief = villageChieDao.getVillageChiefByName(villageChiefName, cellChief.getId());
    
    if (villageChief == null) {
        JOptionPane.showMessageDialog(this, "Village name not found", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    TaskDao taskDao = new TaskDao();
    Task task = new Task(title, description, taskDate, villageChief.getId(), cellChief.getId());
    task.setId(taskId);
    
    if (taskDao.updateTask(task)) {
        JOptionPane.showMessageDialog(this, "Task updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        clearFields();
        loadTasks();
    } else {
        JOptionPane.showMessageDialog(this, "Failed to update task", "Error", JOptionPane.ERROR_MESSAGE);
    }
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

   
    }//GEN-LAST:event_UpdateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
          int selectedRow = jTable1.getSelectedRow();
    if (selectedRow >= 0) {
        // Get values from the selected row
        String title = (String) jTable1.getValueAt(selectedRow, 1);
        String description = (String) jTable1.getValueAt(selectedRow, 2);
        String dateStr = (String) jTable1.getValueAt(selectedRow, 3);
        String villageName = (String) jTable1.getValueAt(selectedRow, 4);
        
        // Set values into fields
        titleField.setText(title);
        descriptionArea.setText(description);
        villageChiefField.setText(villageName);

        // Parse the date and set it to dateChooser
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date taskDate = dateFormat.parse(dateStr);
            dateChooser.setDate(taskDate);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
      int selectedRow = jTable1.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a task to delete", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Object taskIdObject = jTable1.getValueAt(selectedRow, 0);
    if (taskIdObject == null) {
        JOptionPane.showMessageDialog(this, "Invalid task selected", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int taskId = (int) taskIdObject;
    
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this task?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }
    
    try {
        TaskDao taskDao = new TaskDao();
        if (taskDao.deleteTask(taskId)) {
            JOptionPane.showMessageDialog(this, "Task deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadTasks(); // Refresh the table
            clearFields(); // Clear input fields
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete task", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Update;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JTextField descriptionArea;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel n;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField titleField;
    private javax.swing.JTextField villageChiefField;
    // End of variables declaration//GEN-END:variables
    // Declare the combo box at the class level
    private Map<String, VillageChief> villageChiefMap = new HashMap<>();

}
